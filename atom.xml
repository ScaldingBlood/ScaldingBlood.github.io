<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rock &#39;n&#39; Roll will break your heart.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lavaoxsea.com/"/>
  <updated>2018-09-15T15:38:46.550Z</updated>
  <id>http://lavaoxsea.com/</id>
  
  <author>
    <name>paz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第四届阿里中间件性能挑战赛总结</title>
    <link href="http://lavaoxsea.com/2018/09/13/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E9%98%BF%E9%87%8C%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%80%A7%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://lavaoxsea.com/2018/09/13/第四届阿里中间件性能挑战赛总结/</id>
    <published>2018-09-13T11:01:45.000Z</published>
    <updated>2018-09-15T15:38:46.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p><img src="logo.png" alt=""><br>上个学期抽空打了一下<a href="https://tianchi.aliyun.com/programming/introduction.htm?spm=5176.100066.0.0.6acd33afBcahZs&amp;raceId=231657" target="_blank" rel="noopener">阿里中间件的比赛</a>。作为少见的程序设计竞赛，还是有些收获的。最后的成绩如下：</p><p><img src="result.png" alt=""><br>总体说起来马马虎虎吧，感觉和排行榜顶尖选手的差距还是很大的。后文也会说到他们的技术思路。</p><h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><h4 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h4><p>赛题详情见<a href="https://code.aliyun.com/middlewarerace2018/docs?spm=5176.11409106.555.1.627f6668H7cbDv" target="_blank" rel="noopener">这里</a><br>题目描述非常长，而且复杂。这是第一个难关，要有耐心好好审题，理解要做什么。这里再简单描述下：<br>目标是实现一个Service Mesh，也就是在不改变服务本身的情况下，通过添加以 proxy 或 sidecar 形式部署的 Agent，实现服务的治理（服务注册、负载均衡等）。通过这种方式，所有进出服务的流量都会被Agent拦截，因此可以做到协议的转换，够使得基于不同技术框架和通讯协议建设的服务也可以实现互联互通。<br><img src="service-mesh-architecture.png" alt="service-mesh-architecture"></p><p>系统架构如下：<br><img src="system-architecture.png" alt="system-architecture"><br>图中所有的服务都运行在Docker容器中。流程是 Consumer 通过 Consumer-Agent 在 etcd 注册服务，通过Dubbo协议进行RPC。Provider 会通过 Provider-Agent 在 etcd 中查找已经注册的 Consumer 服务并向其 Agent 发送RPC的请求。此外，Provider 还向外界暴露RPC调用接口提供调用。Consumer 的调用要做到负载均衡。以上，需要达到最高的qps。</p><p>初赛最nice的地方是提供了一个Demo，让我们这些没见过上面很多技术的人可以大致先了解一下。事实上，我的大部分工作最开始都是基于这份demo。</p><p><a href="https://code.aliyun.com/middlewarerace2018/agent-demo" target="_blank" rel="noopener">Agent示例</a><br><a href="https://code.aliyun.com/middlewarerace2018/services" target="_blank" rel="noopener">Provider 及 Consumer 服务</a></p><p>其中官方提供的 Provider 和 Consumer 是不可以被修改的。它们都是基于Spring-boot的，逻辑较为简单。其中 Provider 提供了Dubbo的RPC服务，暴露了一个IHelloService接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现的hash方法如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashCode = str.hashCode();</span><br><span class="line">    logger.info(++count + <span class="string">"_"</span> + hashCode);</span><br><span class="line">    sleep(<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每次调用线程睡眠50ms，模拟运行消耗。该服务需要使用Dubbo协议调用，除此以外不需要其他的Dubbo知识。</p><p>Consumer 就像一个常见的Spring-boot服务，提供了一个控制器。随机生成了1024长度字符串。使用AsyncHttpClient异步的向 Provider-Agent 进行RPC的请求，得到返回值并和该字符串的hash值做比较。如果相同则返回值为OK的ResponseEntity，不同则返回值为ERROR的ResponseEntity。示例中还用到了SpringMVC中的异步返回，也就是返回DeferredResult实例。当值被赋给该实例时才会返回。此外AsyncHttpClient库提供了发送异步请求而不阻塞线程的方式，可以学习一下它的API，很实用。具体的函数如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/invoke"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DeferredResult&lt;ResponseEntity&gt; <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String str = RandomStringUtils.random(r.nextInt(<span class="number">1024</span>), <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    String url = <span class="string">"http://127.0.0.1:20000"</span>;</span><br><span class="line"></span><br><span class="line">    DeferredResult&lt;ResponseEntity&gt; result = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    org.asynchttpclient.Request request = org.asynchttpclient.Dsl.post(url)</span><br><span class="line">            .addFormParam(<span class="string">"interface"</span>, <span class="string">"com.alibaba.dubbo.performance.demo.provider.IHelloService"</span>)</span><br><span class="line">            .addFormParam(<span class="string">"method"</span>, <span class="string">"hash"</span>)</span><br><span class="line">            .addFormParam(<span class="string">"parameterTypesString"</span>, <span class="string">"Ljava/lang/String;"</span>)</span><br><span class="line">            .addFormParam(<span class="string">"parameter"</span>, str)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    ListenableFuture&lt;org.asynchttpclient.Response&gt; responseFuture = asyncHttpClient.executeRequest(request);</span><br><span class="line"></span><br><span class="line">    Runnable callback = () -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检查返回值是否正确,如果不正确返回500。有以下原因可能导致返回值不对:</span></span><br><span class="line">            <span class="comment">// 1. agent解析dubbo返回数据不对</span></span><br><span class="line">            <span class="comment">// 2. agent没有把request和dubbo的response对应起来</span></span><br><span class="line">            String value = responseFuture.get().getResponseBody();</span><br><span class="line">            <span class="keyword">if</span> (String.valueOf(str.hashCode()).equals(value))&#123;</span><br><span class="line">                result.setResult(ok);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.setResult(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    responseFuture.addListener(callback, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，题意也基本清晰了。我们需要实现的是两个Agent– Consumer-Agent 和 Provider-Agent。其中 Provider-Agent 负责接收 Provider 的请求，并通过 etcd 查找 Consumer 服务，从而向 Consumer-Agent 发送请求并接收返回，再将结果返回给Provider。 而 Consumer-Agent 负责向 etcd 注册，并接收来自 Provider-Agent 的请求，并向 Consumer 请求结果并返回，再返回给 Provider-Agent。<br>题目页面上有这么一个展示流程的表格：</p><table><thead><tr><th>通讯环节</th><th>序列化协议</th><th>远程通讯协议</th><th>备注</th></tr></thead><tbody><tr><td>Client =&gt; Consumer</td><td>（无参数传递）</td><td>HTTP</td><td></td></tr><tr><td>Consumer =&gt; Consumer Aagent</td><td>FORM</td><td>HTTP</td><td></td></tr><tr><td>Consumer Agent =&gt; Provider Agent</td><td>FORM</td><td>HTTP</td><td>可根据需要自定义</td></tr><tr><td>Provider Agent =&gt; Provider</td><td>JSON</td><td>DUBBO</td><td></td></tr><tr><td>Provider =&gt; Provider Agent</td><td>JSON</td><td>DUBBO</td><td></td></tr><tr><td>Provider Agent =&gt; Consumer Agent</td><td>TEXT</td><td>HTTP</td><td>可以根据需要自定义</td></tr><tr><td>Consumer Agent =&gt; Consumer</td><td>TEXT</td><td>HTTP</td><td></td></tr><tr><td>Consumer =&gt; Client</td><td>TEXT</td><td>HTTP</td><td></td></tr></tbody></table><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>比赛所用到的环境都是基于Docker的，因为整体环境较为复杂而且需要做到能够在本地评测分数，当时搭建环境也花了一个晚上，所以这里也稍微介绍一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;logo.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;上个学期抽空打了一下&lt;a href=&quot;https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动态规划初探</title>
    <link href="http://lavaoxsea.com/2018/07/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AE%9E%E6%88%98/"/>
    <id>http://lavaoxsea.com/2018/07/19/动态规划实战/</id>
    <published>2018-07-19T09:31:42.000Z</published>
    <updated>2018-09-08T16:57:42.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>动态规划（DP）问题是一道坎。相信很多人都有这种感觉，它是中高难度题的常客，蕴含了程序设计的经典思想。</p><p>这种技法或者说思想难以掌握是有原因的。它的核心目标是全局最优，而不是局部最优，这是反直觉的。人脑不是机器，所以我们往往陷入贪心的想法。我第一次遇到背包问题的时候，直接的想法是把物品按 价值/重量 排序，再依次取。这就好比小偷作案，总是先挑价值高又轻便的拿。但是这种经验并不是最优解。</p><p>说到背包问题，第一次看到正解后过了很长时间才真正理解。写本文之前，又读了一遍背包九讲(<a href="https://raw.githubusercontent.com/tianyicui/pack/master/V2.pdf" target="_blank" rel="noopener">pdf</a>)。确实背包问题是经典的DP问题，也是对我影响最深的DP问题。推荐对DP有一定理解之后再读。</p><p>写这篇博客之前，我对DP也是有些畏惧的，做题属于碰运气，有时能A，有时不行，还有些时候我都不清楚是要用DP解题。于是花了2周多的时间，刷了一些leetcode上的DP题目。</p><p><img src="leetcode.png" alt="leetcode"></p><p>目前算是初窥其貌，结合一些看到别人的总结，通俗得讲下我的理解。</p><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>如果说DP的核心目标是寻找全局最优解，那这个最优解是如何确保的呢？通过划分子问题，DP问题常常是需要多步的决策，如背包要挑选物品。这些子问题往往是迭代的，一个自问题依赖于另一个的解。每个自问题都能到达最优解就获取到全局最优。因此可以说DP问题就是如何划分子问题并找到子问题的解。</p><p>从上面的描述里可以明显感觉到一个词，迭代。在我看来，迭代是符合人类思想的解决DP问题最直观的方式。</p><p>举个栗子：</p><p><img src="edit_distance.png" alt="edit distance"><br>来自leetcode72题，难度为hard。这道题我花了很久才做出来……而且回顾的时候又花了很久……</p><p>其实题目并不是特别难，但是看起来比较吓人。hard级的题目中DP都不是很直接，需要一定的转换。</p><p>根据题意，核心目标是匹配上两个字符串，通过delete、replace、add三种操作。那么子问题也就相对直接了，两个字符串的子串的匹配加上变成子串的步数即为结果。</p><p>这里我的想法是有三种策略：</p><ol><li>将str1的首字母替换为str2的首字母</li><li>删除str1的首字母，str2不变</li><li>找到str1中str2首字母出现的第一个位置，删除它及之前的所有字母，删除str2首字母。</li></ol><p>当str1和2中有一方为空时，删除另一方全部字母或添加一方全部字母即可，也就是步数加上剩余一方的长度。</p><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res = <span class="number">1</span> + getRes(i + <span class="number">1</span>, word1, str, map);</span><br><span class="line">res = Math.min(res, <span class="number">1</span> + getRes(i + <span class="number">1</span>, word1, str.substring(<span class="number">1</span>), map));</span><br><span class="line">res = Math.min(res, index + getRes(i + <span class="number">1</span>, word1, str.substring(index + <span class="number">1</span>), map));</span><br></pre></td></tr></table></figure></p><p>其中<code>getRes</code>为对子串递归调用。</p><p>但是这种解法直接提交以后出现TLE，超时错误。原因很简单，计算了重复状态。这里就可以引出DP中的常规操作，剪枝或者说记忆化搜索。我的代码中是使用了一个map来保存状态，通常更常用的方法是用一个数组记录。</p><p>完整代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer[]&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    IntStream.range(<span class="number">0</span>, word2.length() + <span class="number">1</span>).forEach(x -&gt; map.put(word2.substring(x), <span class="keyword">new</span> Integer[word1.length() + <span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> getRes(<span class="number">0</span>, word1, word2, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRes</span><span class="params">(<span class="keyword">int</span> i, String word1, String str, Map&lt;String, Integer[]&gt; map)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (map.get(str)[i] != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> map.get(str)[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i &gt;= word1.length())</span><br><span class="line">        <span class="keyword">return</span> str.length();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span> + getRes(i + <span class="number">1</span>, word1, str, map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        res = Math.min(res, <span class="number">1</span> + getRes(i + <span class="number">1</span>, word1, str.substring(<span class="number">1</span>), map));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = str.indexOf(word1.charAt(i));</span><br><span class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">            res = Math.min(res, index + getRes(i + <span class="number">1</span>, word1, str.substring(index + <span class="number">1</span>), map));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.get(str)[i] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="状态转移"><a href="#状态转移" class="headerlink" title="状态转移"></a>状态转移</h2><p>很多时候，动态规划问题的子问题并不好找。通过动态规划做题的经验我们知道有个叫递推方程的东西。而常见递推方程中递推的就是状态，也就是状态转移的过程，寻找状态的转移而去解决子问题是常见的思路。</p><p><img src="interleaving_string.png" alt="interleaving_string"></p><p>题目为leetcode97，由题意，需要用s1和s2组装成s3。s3从0到s3.length的长度都可以由s1和s2组成（子问题），s1和s2的组成方式则可以由i和j的二维数组表示。i代表s1的位置（substring(0, i)），j代表s2的位置。状态转移为<code>len = i + j - &gt; len + 1 = i + 1 + j / len + 1 = i + j + 1</code>满足相关位置的字符相同即可转移。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s1.length() + s2.length() != s3.length())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s3.length() + <span class="number">1</span>][s3.length() + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s3.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.length() &gt;= i -j &amp;&amp; dp[j][i-j -<span class="number">1</span>] == <span class="number">1</span> &amp;&amp; s1.charAt(i - j - <span class="number">1</span>) == s3.charAt(i -<span class="number">1</span>)) &#123;</span><br><span class="line">                dp[j][i - j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s2.length() &gt;= i -j &amp;&amp; dp[i-j -<span class="number">1</span>][j] == <span class="number">1</span> &amp;&amp; s2.charAt(i - j - <span class="number">1</span>) == s3.charAt(i -<span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i - j][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s2.length()][s1.length()] == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很多DP的文章都在强调寻找递推式，但是递推式是靠近结果的一步。<strong>寻找递推式的过程，是划分子问题或者表示状态并得到状态的转移。</strong></p><h2 id="一些理论"><a href="#一些理论" class="headerlink" title="一些理论"></a>一些理论</h2><p>知乎上关于理解动态规划也有许多回答，多是关于理论和概念的。能够用动态规划解的题目，状态都具有这两种特性。</p><blockquote><p>最优子结构: 每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到<br>无后效性: 而不管之前这个状态是如何得到的</p></blockquote><p>做到一些dp题的时候，我感觉DP和DFS（广度优先搜索）的过程十分相近。例如一个网格，需要从左上角通过向下向右走到右下角，节点带权值。再理解动态规划之前，这对我来说就是走过所有节点并取走过该节点时最小值的问题。这里有一个解释：</p><blockquote><p>每个阶段只有一个状态-&gt;递推<br>每个阶段的最优状态都是由上一个阶段的最优状态得到的-&gt;贪心<br>每个阶段的最优状态是由之前所有阶段的状态的组合得到的-&gt;搜索<br>每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的-&gt;动态规划。<br>                  ——<a href="https://www.zhihu.com/question/23995189/answer/35429905" target="_blank" rel="noopener">知乎</a></p></blockquote><p>这一段话是描述这几种常用算法和状态之间的关系的精髓。需要仔细想想，此处就不再赘述。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>实践出真知。在做了一定量的题目之后，会有自己的总结与归纳。动态规划的状态描述是个难点，一般都是用数组来保存状态。</p><ul><li>最常见的是数组的维度代表状态位置，比如一个二维数组中的某个值。</li><li>数组的维度可以表示状态的维度，所有维度组合为当前状态。</li><li>用pal[start][end]来存储状态，start和end分别代表位置。</li><li>用数组的第一维表示迭代的层数，第二维表示位置.</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>刷了动态规划的题，直观的感受是，我如果知道要用DP解题，80%以上的Medium都可以解出来，但是hard估计也就50%不到。首先如何识别一道题是需要DP解题的问题？这估计只有在以后的实战中判断了。hard级别的动态规划难点也主要在它的不直观或者说需要多绕一个弯，可能根据题意本身解题会一头雾水，但是换个角度就豁然开朗，这需要的就不只是DP的掌握了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;动态规划（DP）问题是一道坎。相信很多人都有这种感觉，它是中高难度题的常客，蕴含了程序设计的经典思想。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用hexo搭建Blog</title>
    <link href="http://lavaoxsea.com/2018/07/15/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BABlog/"/>
    <id>http://lavaoxsea.com/2018/07/15/使用hexo搭建Blog/</id>
    <published>2018-07-14T17:47:33.000Z</published>
    <updated>2018-09-15T14:38:34.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。    –<a href="hexo文档 https://hexo.io/zh-cn/docs/index.html">hexo 文档</a></p></blockquote><p><img src="hexo_intro.png" alt="hexo"></p><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> 基于<code>node.js</code>和<code>npm</code>。它生成静态页面，对使用者而言高度封装，几乎不需要前端知识，各种已有主题又十分美观，而且切换也十分方便，可以说是个人博客的完美选择。</p><h2 id="安装（MacOS）"><a href="#安装（MacOS）" class="headerlink" title="安装（MacOS）"></a>安装（MacOS）</h2><p>安装git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><hr><p>安装npm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><br>重启终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><hr><p>安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p><code>_config.yml</code>包含了博客的大部分配置，配置内容可在<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">文档</a>中查看</p><p>目录：</p><ul><li>source 存放文章<ul><li>_drafts 存放草稿，默认不显示</li><li>_posts 存放文章</li></ul></li><li>themes 存放主题</li><li>scaffolds 模版，新建文章时受模版控制</li><li>public 存放生成的html等文件</li></ul><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p><code>hexo init &lt;folder&gt;</code> 在文件夹中初始化hexo<br><code>hexo new [layout] &lt;title&gt;</code> 新建文章，layout指draft或post，draft为草稿，post为发布的文章<br><code>hexo generator</code> 将markdown转为静态页面<br><code>hexo publish [layout] &lt;filename&gt;</code> 发表草稿，将draft中指定的文件转到post中<br><code>hexo server</code> 启动hexo服务器，默认端口4000，可以通过<code>-p</code>设置<br><code>hexo clean</code> 清除缓存文件和已经生成的静态文件<br><code>hexo list</code> 展示网站信息</p><h2 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h2><p>包含大量非Markdown语法，不便迁移，尽量不使用。两个例子：</p><h4 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题页</a>包含了主题展示和github跳转，按照github项目中README安装即可。</p><p>本人使用的是<a href="https://github.com/kywk/hexo-theme-casper" target="_blank" rel="noopener">casper的修改版</a><br>所有和主题相关的文件夹都在themes中并且是可以自定义和修改的，主题目录下提供了_config.yaml文件。比如图标、logo、favicon等。此外，可以进一步通过修改js和css为你想要的样式。</p><h2 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h2><p>如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code>的方法访问它们。</p><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，可以通过将 config.yml 文件中的 <code>post_asset_folder</code> 选项设为 true 来打开。</p><h2 id="about页面"><a href="#about页面" class="headerlink" title="about页面"></a>about页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>修改Front-matter部分，layout为false，comments为false</p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>本人使用了valine，主要工作是取theme文件夹里修改相关的代码。有些主题提供了一些评论系统，直接配置即可。</p><p><a href="https://valine.js.org/quickstart.html#%E8%AF%84%E8%AE%BA%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">官方教程</a>在这，过程很简明。先去LeanCloud上注册账号，获取AppKey及AppId，填到评论的js中即可。</p><p>最好再配置一下LeanCloud的安全域名，可以保证只有Blog的访问。</p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>其实就是些<code>a</code>标签，该主题自带，不过是Twitter、脸书及Google的，我自己照着加了一个微博的。代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span> href=<span class="string">"http://service.weibo.com/share/share.php?url=&lt;%- permalink %&gt;"</span> onclick=<span class="string">"window.open(this.href, 'weibo-share', 'width=550,height=235');return false;"</span>&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>&gt;Weibo&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure></p><p>似乎baidushare也很常用，但是……有点丑。</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>铛铛铛～ 终于到激动人心的时候了，上 vps/github.io!</p><h4 id="github-io"><a href="#github-io" class="headerlink" title="github.io"></a>github.io</h4><p>需要新建一个<username>.github.io 的仓库</username></p><p>使用git部署，需要先安装插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>修改config.yml中的deploy为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> - type: git</span><br><span class="line">   repo: &lt;repo-name&gt;</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure></p><p>之后执行hexo deploy</p><p>可以自行配置域名，在此不赘述</p><h4 id="vps"><a href="#vps" class="headerlink" title="vps"></a>vps</h4><p>vps需要从 Vultr 或者 DigitalOcean 等供应商处租赁，常用的配置价格为5刀/月</p><p>部署其实也很简单…… 先安装一个Nginx，记得防火墙开启权限 步骤大致如下（Ubuntu）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx</span><br><span class="line"></span><br><span class="line">ufw allow &quot;Nginx Full&quot;</span><br></pre></td></tr></table></figure></p><p>然后配置一下nginx，使之能够显示博客站点</p><p>创建站点配置文件<code>vi /etc/nginx/conf.d/blog.conf</code></p><p>内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line">        root /var/www/blog/html;</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line">        server_name ***;</span><br><span class="line">        access_log /var/log/nginx/blog_access.log;</span><br><span class="line">        error_log /var/log/nginx/blog_error.log;</span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">        location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">          root /var/www/blog/html;</span><br><span class="line">          access_log   off;</span><br><span class="line">          expires      1d;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;</span><br><span class="line">          root /var/www/blog/html;</span><br><span class="line">          access_log   off;</span><br><span class="line">          expires      10m;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后配置git钩子 也就是一个空的git仓库，当本地的hexo推送给这个仓库时，会有个脚本执行自动拉取代码。</p><p><code>mkdir -p /var/www/blog/html</code>路径用于存放站点</p><p><code>git init --bare blog.git</code>创建空仓库</p><p><code>cd blog.git/hooks</code>准备创建钩子脚本</p><p><code>vi post-receive</code>创建脚本</p><p>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/blog/html --git-dir=/var/www/blog/html/blog.git checkout -f</span><br></pre></td></tr></table></figure></p><p>git checkout -f 会强制拉取代码</p><p>本地配置config.yml的deploy部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: </span><br><span class="line">   vps: ssh://&lt;username&gt;@&lt;ip&gt;:&lt;port&gt;/var/www/path/to/blog.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure></p><p>这种方式可以配置ssh的端口，其中的username需要可以免密登陆vps。</p><h2 id="404"><a href="#404" class="headerlink" title="404"></a>404</h2><p>首先需要创建一个自定义404页面，与about页相似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></table></figure><p>修改Front-matter部分，layout为false，permalink为/404.html，comments为false</p><p>与/about不同，它会在根目录生成404.html而不是/404/index.html。填入内容即可</p><p>对于github pages：检测到根目录的404.html时，会将其作为404页面</p><p>对于nginx：修改站点conf，如blog.conf，添加error page条目<code>error_page 404 /404.html;</code></p><h2 id="Outro"><a href="#Outro" class="headerlink" title="Outro"></a>Outro</h2><p>一整天时间搭建Blog，基本达到心里预期，基本都很简明</p><p>后续还有SEO、Google Analysis及全站Https</p><p>在反复沮丧中坚持✊</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://lavaoxsea.com/tags/hexo/"/>
    
      <category term="Blog" scheme="http://lavaoxsea.com/tags/Blog/"/>
    
  </entry>
  
</feed>
